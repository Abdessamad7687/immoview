// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OAuthProvider {
  GOOGLE
  FACEBOOK
}

enum VideoStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum ShareTarget {
  WHATSAPP
  FACEBOOK
  TWITTER
  LINK
  OTHER
}

enum ActorType {
  ADMIN
  USER
  SYSTEM
}

model User {
  id           String           @id @default(uuid()) @db.Uuid
  email        String           @unique
  name         String?
  avatarUrl    String?
  isActive     Boolean          @default(true)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  identities   SocialIdentity[]
  comments     Comment[]
  likes        Like[]
  shares       Share[]
}

model SocialIdentity {
  id              String        @id @default(uuid()) @db.Uuid
  userId          String        @db.Uuid
  provider        OAuthProvider
  providerUserId  String
  email           String?
  createdAt       DateTime      @default(now())

  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerUserId])
}

model Admin {
  id           String     @id @default(uuid()) @db.Uuid
  email        String     @unique
  name         String?
  passwordHash String
  isSuperAdmin Boolean    @default(false)
  isActive     Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  videos       Video[]
}

model Video {
  id                 String       @id @default(uuid()) @db.Uuid
  title              String
  description        String?
  storageUrl         String
  thumbnailUrl       String?
  status             VideoStatus  @default(DRAFT)
  uploadedByAdminId  String       @db.Uuid
  publishedAt        DateTime?
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt

  uploadedBy         Admin        @relation(fields: [uploadedByAdminId], references: [id])
  comments           Comment[]
  likes              Like[]
  shares             Share[]
  metrics            VideoMetrics?
}

model Comment {
  id        String   @id @default(uuid()) @db.Uuid
  videoId   String   @db.Uuid
  userId    String   @db.Uuid
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  video     Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Like {
  id        String   @id @default(uuid()) @db.Uuid
  videoId   String   @db.Uuid
  userId    String   @db.Uuid
  createdAt DateTime @default(now())

  video     Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, videoId])
}

model Share {
  id         String      @id @default(uuid()) @db.Uuid
  videoId    String      @db.Uuid
  userId     String      @db.Uuid
  target     ShareTarget
  externalId String?
  createdAt  DateTime    @default(now())

  video      Video       @relation(fields: [videoId], references: [id], onDelete: Cascade)
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VideoMetrics {
  videoId      String   @id @db.Uuid
  likeCount    Int      @default(0)
  commentCount Int      @default(0)
  shareCount   Int      @default(0)
  updatedAt    DateTime @updatedAt

  video        Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)
}

model AuditLog {
  id        String    @id @default(uuid()) @db.Uuid
  actorType ActorType
  actorId   String
  action    String
  metadata  Json?
  createdAt DateTime  @default(now())
}
